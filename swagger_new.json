{
    "swagger": "2.0",
    "info": {
        "description": "Lightroom API Documentation, made available through [adobe.io](https://www.adobe.io). API Change Logs are available [here](https://bagra98.github.io/lightroom-public-apis/release-notes/).",
        "version": "1.0.0",
        "title": "Lightroom API Documentation",
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "servers": [
        {
            "url": "https://image.adobe.io/"
        }
    ],
    "tags": [
        {
            "name": "health",
            "description": "Lightroom Services status.",
            "externalDocs": {
                "description": "More info",
                "url": "https://www.adobe.io"
            }
        },
        {
            "name": "accounts",
            "description": "Account information for the authenticated user."
        },
        {
            "name": "catalogs",
            "description": "Catalog information for the authenticated user."
        },
        {
            "name": "assets",
            "description": "Information for assets, typically images or videos."
        },
        {
            "name": "albums",
            "description": "Information for albums, which contain references to zero or more assets."
        }
    ],
    "paths": {
        "/v2/health": {
            "get": {
                "tags": [
                    "health"
                ],
                "summary": "Lightroom Services health check",
                "description": "Will return the Lightroom server version ID (a hexadecimal value not guaranteed to be sequential) if the services are up.",
                "operationId": "getHealth",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                    "name": "X-API-Key",
                    "in": "header",
                    "description": "Client ID (API Key) which is subscribed to the Lightroom APIs through console.adobe.io",
                    "required": true,
                    "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "version": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The request failed because the API Key is not valid.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "code": {
                                    "type": "integer",
                                    "enum": [ 403003 ]
                                },
                                "description": {
                                    "type": "string",
                                    "enum": [ "API Key is invalid" ]
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                }
            }
        }
    },
    "components": {
        "responses": {
            "ServiceUnavailable": {
                "description": "The request failed because the service is temporarily unavailable. Try again later.",
                "schema": {
                    "type": "object",
                    "properties": {
                        "code": {
                            "type": "integer",
                            "enum": [ 9999 ]
                        },
                        "description": {
                            "type": "string",
                            "enum": [ "Service is temporarily unavailable" ]
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "iso8601DateTime": {
            "description": "datetime in ISO-8601 format (e.g. 2016-01-15T16:18:00-05:00) with both date and time required, including seconds, but timezone optional. Also flexible on allowing some nonstandard timezone formats like 2016-01-15T12:10:32+0000 or 2016-01-15T12:10:32-05.",
            "type": "string",
            "pattern": "^([0-9]{3}[1-9]|[0-9]{2}[1-9][0-9]|[0-9][1-9][0-9]{2}|[1-9][0-9]{3})-((02-([1-2][0-9]|0[1-9]))|((01|03|05|07|08|10|12)-(3[0-1]|[1-2][0-9]|0[1-9]))|((04|06|09|11)-(30|[1-2][0-9]|0[1-9])))T(2[0-3]|[0-1][0-9]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(((\\+|-)(2[0-3]|[0-1][0-9])(:?[0-5][0-9])?)|Z)?$"
        },
        "utcDateTime": {
            "description": "datetime in RFC-3339 format (subset of ISO-8601) requiring a UTC time ending with Z (so -00:00 or +00-00 suffix NOT allowed). The datetime must have date and time, including seconds, e.g. 2016-01-15T09:23:34Z.",
            "type": "string",
            "pattern": "^([0-9]{3}[1-9]|[0-9]{2}[1-9][0-9]|[0-9][1-9][0-9]{2}|[1-9][0-9]{3})-((02-([1-2][0-9]|0[1-9]))|((01|03|05|07|08|10|12)-(3[0-1]|[1-2][0-9]|0[1-9]))|((04|06|09|11)-(30|[1-2][0-9]|0[1-9])))T(2[0-3]|[0-1][0-9]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?Z$"
        },
        "max1024CharacterString": {
            "type": "string",
            "minLength": 1,
            "maxLength": 1024
        },
        "uuid": {
            "type": "string",
            "pattern": "^[a-f0-9]{32}$"
        },
        "lex64SortOrderString": {
            "type": "string",
            "pattern": "^[-_0-9a-zA-Z]*[_0-9a-zA-Z]$",
            "minLength": 1,
            "maxLength": 1024
        },
        "albumPayload": {
            "type": "object",
            "properties": {
                "userCreated": {
                    "$ref": "#/definitions/utcDateTime"
                },
                "userUpdated": {
                    "$ref": "#/definitions/utcDateTime"
                },
                "name": {
                    "type": "string"
                },
                "cover": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "$ref": "#/definitions/uuid",
                            "description": "Lightroom guid for the asset serving as the cover for the album."
                        }
                    }
                },
                "parent": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "$ref": "#/definitions/uuid",
                            "description": "Lightroom guid for the direct parent of the new album."
                        }
                    }
                },
                "publishInfo": {
                    "type": "object",
                    "properties": {
                        "servicePayload": {
                            "type": "string",
                            "description": "Album metadata, unique to the service, encapsulated as a single string with a maximum length of 1024 characters."
                        },
                        "remoteId": {
                            "type": "string",
                            "description": "Identifier for the album that is unique to the publishing service."
                        },
                        "created": {
                            "$ref": "#/definitions/utcDateTime",
                            "description": "Date when the externally affiliated content (identified by remoteId) was created."
                        },
                        "updated": {
                            "$ref": "#/definitions/utcDateTime",
                            "description": "Date when the externally affiliated content identified by remoteId) was last updated."
                        },
                        "deleted": {
                            "type": "boolean",
                            "description": "True if the externally affiliated content (identified by remoteId) was deleted; acts as a tombstone."
                        },
                        "remoteLinks": {
                            "type": "object",
                            "description": "Links to affiliated URLs on the publishing service.",
                            "properties": {
                                "edit": {
                                    "type": "object",
                                    "properties": {
                                        "href": {
                                            "type": "string",
                                            "description": "Fully-formed URL to a location to edit affiliated content (identified by remoteId) on the external service."
                                        }
                                    }
                                },
                                "view": {
                                    "properties": {
                                        "href": {
                                            "type": "string",
                                            "description": "Fully-formed URL to a location to view affiliated content (identified by remoteId) on the external service."
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "externalDocs": {
        "description": "Find out more about Lightroom",
        "url": "https://www.adobe.com/products/photoshop-lightroom.html"
    }
}